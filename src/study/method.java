package study;

public class method {

    // *메서드*
    // 메서드 : 일련의 동작을 하나로 묶는 것. (일련의 코드 묶음)
    // 메서드 특징 :
    //    *입력 값에 따른 반환값(return)이 있다 > 입력에 따른 반환값을 미리 정해놓고 사용할 수 있음.
    //    (자판기 버튼을 누르면 음료수가 나오는 걸 생각하기)
    //
    // 메서드 사용 : 메서드를 사용하려면 크게 2가지 개념을 알고 있어야함.
    //  1. 메서드 호출 (실행) : 메서드를 실행시키는 것. 값을 입력하고, 그에 따른 결과를 받는 방식.
    //  2. 메서드 정의 (만들기) : 메서드를 사용하려면 먼저 일련의 코드들이 미리 작성되어있어야함.
    //      (햄버거를 만들려면 먼저 레시피가 있어야 하는 것처럼)
    // *많이 쓰는 프로그래밍 도구(기법)는 자바가 코드로 제공함 > JAVA API 라고 함
    //
    //
    //  메서드의 구성요소 4가지 : 1.메서드 이름 / 2.입력 변수 / 3.반환 값 / 4.반환 타임
    //
    //  * 입력 변수 : 메서드 실행에 필요한 정보를 받아오는 변수 = 매개변수(parameter)
    //    ㄴ> 해당 입력 변수 n에는 메서드 호출 시, 입력한 값인 정수 3이 대입 됨 (ex 식)
    //        따라서 타입또한 입력한 값에 맞춰서 정의해줘야함


    // ex) int z = square(3);
    //
    // *int -> 최종적인 반환값의 타입
    // public static (4) *int square(1) (int n)(2) { // 입력값 받기
    // int result;   // 변수 생성       (제곱값을 구하기 위한 일련의 코드들 작성)
    // result = n * n;      // 값 계산  (제곱값을 구하기 위한 일련의 코드들 작성)
    // return result; (3)   // 값 반환   (위에 코드들의 결과 반환 = return 키워드 사용)
    //  }
    //
    // 결과적으로 이렇게 완성된 square 메서드는 정수 값을 입력 받아서,
    // 그 제곱을 반환할 수 있게 됨.

    // 정리
    // 메서드는 입력값에 따른 반환값이 있고, 그 메서드는 호출을 통해 사용 가능.
    // 메서드 호출이 될려면 먼저 메서드가 만들어져 있어야함
    // 메서드 호출을 할려면 먼저 메서드의 구조에 맞게 작성을 해야함

    // 메서드에서 선언된 변수는 메서드 호출 시, 전달값으로 사용. (int num = 3; >> calculate(num);
    // 전달된 변수 num 의 값은 parameter 즉, 입력 변수 n으로 대입됨 (public static double calculate(int n)
    // 이를 통해 3인분의 총 그람수를 구하고, 그람당 칼롤리 값을 곱해서, 총 칼로리 값을 계산함.
    // 이 값은 해당 메소드의 종류와 함께 호출된 위치로 반환됨.
    // 계산된 값은 변수 result에 다시 대입되고 최종적으로 답이 출력됨.


//    자바에서 메서드 괄호 안에는 메서드가 실행될 때 필요한 매개변수(parameter)를 적습니다.
//    메서드는 종종 입력값을 필요로 하며, 이러한 입력값은 메서드의 괄호 안에 선언됩니다.
//    이 매개변수는 메서드의 동작에 영향을 미치는 데이터를 전달하는 데 사용됩니다.
//    메서드를 호출할 때, 괄호 안에 전달되는 값들은 메서드 내에서 사용될 수 있도록 해당 매개변수에 할당됩니다.
//    이렇게 함으로써 메서드는 외부로부터 값을 받아들이고, 그 값을 처리하여 원하는 동작을 수행할 수 있습니다.
//    그러나 모든 메서드가 매개변수를 필요로 하는 것은 아닙니다. 메서드가 특정 작업을 수행하는 데 필요한 모든 정보를 이미 가지고 있는 경우,
//    메서드 정의 시 매개변수를 생략할 수 있습니다. 이는 메서드가 외부에서 독립적으로 작동할 수 있는 경우에 해당합니다.
//    따라서 메서드 괄호 안에 매개변수를 적는지 여부는 해당 메서드가 외부 데이터에 의존하는지 여부에 따라 결정됩니다.
//    만약 외부 데이터를 필요로 한다면 매개변수를 적어야 하고, 그렇지 않다면 매개변수를 생략할 수 있습니다.


    // *조건문*
    // 조건문이란 : 조건에 따라 실행 흐름을 결정하는 구문 (ex. 버스 승차요금은 나이에 따라 결정됨)
    // 이렇게 특정 조건을 기준으로 무언가 결정할 때 사용하는 문법.

    // 크게 3가지 종류 (if, if-else, else-if)
    // if : 특정 동작의 수행 여부. 즉, 할지 말지를 결정함. (true, false)
    // if ( 조건 ) {
    //     조건이 참일 때에 수행할 내용
    // }

    // if else : 둘 중 하나를 선택할 때 사용
    // if ( condition ) {
    //      action A (참일때)
    // } else {
    //      action B (거짓일때)
    //}

    // else if : 여러가지 선택지 중에 하나를 고를 때 사용
    // if ( condition ) {
    //      action A (참일때)
    // } else if {
    //      action B (거짓일때)
    // } else if {
    //      action C (거짓일때2)
    // } else {
    //      action D (다 구라핑일 때)
    // }


    // 참인 것을 발견하면 조건문 탈출. (즉, 4개 중에 하나 선택되는 것)






















}
